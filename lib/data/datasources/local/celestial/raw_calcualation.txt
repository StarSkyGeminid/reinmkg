import 'dart:math';

extension DateTimeFormatter on DateTime {
  String toReadableString() {
    return '${day.toString().padLeft(2, '0')}/${month.toString().padLeft(2, '0')}/$year '
        '${hour.toString().padLeft(2, '0')}:${minute.toString().padLeft(2, '0')}';
  }
}

String formatDateTime(DateTime dt) {
  return '${dt.hour.toString().padLeft(2, '0')}:${dt.minute.toString().padLeft(2, '0')}';
}

String formatDate(DateTime dt) {
  return '${dt.day.toString().padLeft(2, '0')}/${dt.month.toString().padLeft(2, '0')}/${dt.year}';
}

// Data Classes
class MoonData {
  final double longitude;
  final double latitude;
  final double distance;
  final double phase;
  final double rightAscension; // Menambahkan rightAscension
  final double declination; // Menambahkan declination juga

  MoonData({
    required this.longitude,
    required this.latitude,
    required this.distance,
    required this.phase,
    required this.rightAscension,
    required this.declination,
  });
}

class SunData {
  final double longitude;
  final double distance;
  final double rightAscension;

  SunData(
      {required this.longitude,
      required this.distance,
      required this.rightAscension});
}

class EclipseData {
  final bool isSolarEclipse;
  final bool isLunarEclipse;
  final double magnitude;
  final Duration duration;

  EclipseData(
      {required this.isSolarEclipse,
      required this.isLunarEclipse,
      required this.magnitude,
      required this.duration});
}

class RiseSetData {
  final DateTime moonRise;
  final DateTime moonSet;
  final DateTime sunRise;
  final DateTime sunSet;

  RiseSetData(
      {required this.moonRise,
      required this.moonSet,
      required this.sunRise,
      required this.sunSet});
}

class DetailedPhaseData {
  final double phase;
  final double illumination;
  final String phaseName;
  final double ageInDays;
  final DateTime nextNewMoon;
  final DateTime nextFullMoon;

  DetailedPhaseData(
      {required this.phase,
      required this.illumination,
      required this.phaseName,
      required this.ageInDays,
      required this.nextNewMoon,
      required this.nextFullMoon});
}

// Main Calculator Class
class AstronomicalCalculator {
  // Constants
  static const double OBLIQUITY_OF_ECLIPTIC = 23.452294;
  static const double LUNAR_SYNODIC_MONTH = 29.530589;
  static const double LUNAR_SIDEREAL_MONTH = 27.321662;
  static const double ASTRONOMICAL_UNIT = 149597870.7;
  static const double EARTH_RADIUS = 6378.14;

  static const List<String> MOON_PHASE_NAMES = [
    'New Moon',
    'Waxing Crescent',
    'First Quarter',
    'Waxing Gibbous',
    'Full Moon',
    'Waning Gibbous',
    'Last Quarter',
    'Waning Crescent'
  ];

  // Date Conversion Methods
  double dateToJulianDate(DateTime date) {
    int y = date.year;
    int m = date.month;
    int d = date.day;

    if (m <= 2) {
      y -= 1;
      m += 12;
    }

    int a = (y / 100).floor();
    int b = 2 - a + (a / 4).floor();

    return (365.25 * (y + 4716)).floor() +
        (30.6001 * (m + 1)).floor() +
        d +
        b -
        1524.5;
  }

  DateTime julianDateToDate(double jde) {
    // Mengkonversi Julian Ephemeris Date ke DateTime dengan waktu yang tepat
    double jd = jde + 0.5;
    double z = jd;
    double f = jd - z;

    double a = z;

    if (z < 2299161) {
      a = z;
    } else {
      double alpha = ((z - 1867216.25) / 36524.25);
      a = z + 1 + alpha - (alpha / 4);
    }

    double b = a + 1524;
    double c = ((b - 122.1) / 365.25);
    double d = (365.25 * c);
    double e = ((b - d) / 30.6001);

    double day = b - d - (30.6001 * e) + f;
    int month = (e < 14) ? (e - 1).floor() : (e - 13).floor();
    int year = (month > 2) ? (c - 4716).floor() : (c - 4715).floor();

    // Mengekstrak jam, menit, dan detik dari bagian fraksional
    double hours = (day - day.floor()) * 24;
    double minutes = (hours - hours.floor()) * 60;
    double seconds = (minutes - minutes.floor()) * 60;

    return DateTime(year, month, day.floor(), hours.floor(), minutes.floor(),
        seconds.floor());
  }

  // DateTime julianDateToDate(double jd) {
  //   double z = (jd + 0.5).floor().toDouble();
  //   double f = jd + 0.5 - z;

  //   double alpha = ((z - 1867216.25) / 36524.25).floor().toDouble();
  //   double a = z + 1 + alpha - (alpha / 4).floor();

  //   double b = a + 1524;
  //   double c = ((b - 122.1) / 365.25).floor().toDouble();
  //   double d = (365.25 * c).floor().toDouble();
  //   double e = ((b - d) / 30.6001).floor().toDouble();

  //   int day = (b - d - (30.6001 * e).floor() + f).floor();
  //   int month = ((e < 14) ? e - 1 : e - 13).toInt();
  //   int year = ((month > 2) ? c - 4716 : c - 4715).toInt();

  //   return DateTime(year, month, day);
  // }

  // DateTime julianDateToDate(double jd) {
  //   double z = (jd + 0.5);
  //   double f = jd + 0.5 - z;

  //   double alpha = ((z - 1867216.25) / 36524.25);
  //   double a = z + 1 + alpha - (alpha / 4).floor();

  //   double b = a + 1524;
  //   double c = ((b - 122.1) / 365.25);
  //   double d = (365.25 * c);
  //   double e = ((b - d) / 30.6001);

  //   int day = (b - d - (30.6001 * e).floor() + f).floor();
  //   int month = ((e < 14) ? e - 1 : e - 13).floor();
  //   int year = ((month > 2) ? c - 4716 : c - 4715).floor();

  //   return DateTime(year, month, day);
  // }

  // Angle Utilities
  double degreesToRadians(double degrees) => degrees * pi / 180.0;
  double radiansToDegrees(double radians) => radians * 180.0 / pi;

  double normalizeAngle(double angle) {
    while (angle >= 360.0) angle -= 360.0;
    while (angle < 0.0) angle += 360.0;
    return angle;
  }

  MoonData calculateMoonPosition(DateTime date) {
    double jd = dateToJulianDate(date);
    double T = (jd - 2451545.0) / 36525.0;

    // Mean elements
    double Lp = normalizeAngle(218.3164477 + 481267.88123421 * T);
    double D = normalizeAngle(297.8501921 + 445267.1114034 * T);
    double M = normalizeAngle(357.5291092 + 35999.0502909 * T);
    double Mp = normalizeAngle(134.9633964 + 477198.8675055 * T);
    double F = normalizeAngle(93.2720950 + 483202.0175233 * T);

    // Perturbations in longitude
    double deltaL = 6288.0160 * sin(degreesToRadians(Mp)) +
        1274.0180 * sin(degreesToRadians(2 * D - Mp)) +
        658.0140 * sin(degreesToRadians(2 * D)) +
        214.0170 * sin(degreesToRadians(2 * Mp)) -
        186.0540 * sin(degreesToRadians(M));

    // Perturbations in latitude
    double deltaB = 5128.0 * sin(degreesToRadians(F)) +
        280.0 * sin(degreesToRadians(Mp + F)) +
        277.0 * sin(degreesToRadians(Mp - F)) +
        176.0 * sin(degreesToRadians(2 * D - F)) +
        115.0 * sin(degreesToRadians(2 * D + F));

    // Perturbations in distance
    double deltaR = -20905.355 * cos(degreesToRadians(Mp)) -
        3699.111 * cos(degreesToRadians(2 * D - Mp)) -
        2955.968 * cos(degreesToRadians(2 * D)) -
        569.925 * cos(degreesToRadians(2 * Mp));

    // Calculate final position elements
    double longitude = Lp + deltaL / 1000000.0;
    double latitude = deltaB / 1000000.0;
    double distance = 385000.56 + deltaR / 1000.0;

    // Calculate phase
    double phase = calculateMoonPhase(D, M, Mp);

    // Calculate right ascension and declination
    double epsilon = 23.43929111 -
        0.013004167 * T -
        0.000000164 * T * T +
        0.000000503 * T * T * T;

    // Convert ecliptic coordinates to equatorial
    double rightAscension =
        calculateRightAscension(longitude, latitude, epsilon);
    double declination = calculateDeclination(longitude, latitude, epsilon);

    return MoonData(
        longitude: longitude,
        latitude: latitude,
        distance: distance,
        phase: phase,
        rightAscension: rightAscension,
        declination: declination);
  }

  double calculateRightAscension(
      double longitude, double latitude, double epsilon) {
    double lambda = degreesToRadians(longitude);
    double beta = degreesToRadians(latitude);
    double eps = degreesToRadians(epsilon);

    double numerator = sin(lambda) * cos(eps) - tan(beta) * sin(eps);
    double denominator = cos(lambda);

    double ra = radiansToDegrees(atan2(numerator, denominator));

    // Normalize to [0, 360]
    while (ra < 0) ra += 360;
    while (ra >= 360) ra -= 360;

    return ra;
  }

  double calculateDeclination(
      double longitude, double latitude, double epsilon) {
    double lambda = degreesToRadians(longitude);
    double beta = degreesToRadians(latitude);
    double eps = degreesToRadians(epsilon);

    return radiansToDegrees(
        asin(sin(beta) * cos(eps) + cos(beta) * sin(eps) * sin(lambda)));
  }

  // Update SunData class juga untuk konsistensi
  SunData calculateSunPosition(DateTime date) {
    double jd = dateToJulianDate(date);
    double T = (jd - 2451545.0) / 36525.0;

    double L0 = normalizeAngle(280.46646 + 36000.76983 * T + 0.0003032 * T * T);
    double M = normalizeAngle(357.52911 + 35999.05029 * T - 0.0001537 * T * T);

    // Equation of center
    double C = (1.914602 - 0.004817 * T - 0.000014 * T * T) *
            sin(degreesToRadians(M)) +
        (0.019993 - 0.000101 * T) * sin(degreesToRadians(2 * M)) +
        0.000289 * sin(degreesToRadians(3 * M));

    double trueLong = L0 + C;
    double distance = (1.000001018 *
        (1 - 0.016708634 - 0.000042037 * T - 0.0000001267 * T * T));

    // Calculate right ascension
    double epsilon = 23.43929111 - 0.013004167 * T;
    double rightAscension = calculateRightAscension(trueLong, 0, epsilon);

    return SunData(
        longitude: trueLong,
        distance: distance,
        rightAscension: rightAscension);
  }
  // // Moon Calculations
  // MoonData calculateMoonPosition(DateTime date) {
  //   double jd = dateToJulianDate(date);
  //   double T = (jd - 2451545.0) / 36525.0;

  //   // Mean elements
  //   double Lp = normalizeAngle(218.3164477 + 481267.88123421 * T);
  //   double D = normalizeAngle(297.8501921 + 445267.1114034 * T);
  //   double M = normalizeAngle(357.5291092 + 35999.0502909 * T);
  //   double Mp = normalizeAngle(134.9633964 + 477198.8675055 * T);
  //   double F = normalizeAngle(93.2720950 + 483202.0175233 * T);

  //   // Perturbations
  //   double deltaL = 6288.0160 * sin(degreesToRadians(Mp)) +
  //       1274.0180 * sin(degreesToRadians(2 * D - Mp)) +
  //       658.0140 * sin(degreesToRadians(2 * D));

  //   double latitude = calculateMoonLatitude(F, Mp);
  //   double distance = calculateMoonDistance(D, M, Mp);
  //   double phase = calculateMoonPhase(D, M, Mp);

  //   return MoonData(
  //       longitude: Lp + deltaL / 1000000.0,
  //       latitude: latitude,
  //       distance: distance,
  //       phase: phase);
  // }

  // Sun Calculations
  // SunData calculateSunPosition(DateTime date) {
  //   double jd = dateToJulianDate(date);
  //   double T = (jd - 2451545.0) / 36525.0;

  //   double L0 = normalizeAngle(280.46646 + 36000.76983 * T + 0.0003032 * T * T);
  //   double M = normalizeAngle(357.52911 + 35999.05029 * T - 0.0001537 * T * T);

  //   // Equation of center
  //   double C = (1.914602 - 0.004817 * T - 0.000014 * T * T) *
  //           sin(degreesToRadians(M)) +
  //       (0.019993 - 0.000101 * T) * sin(degreesToRadians(2 * M)) +
  //       0.000289 * sin(degreesToRadians(3 * M));

  //   double trueLong = L0 + C;
  //   double distance = (1.000001018 *
  //       (1 - 0.016708634 - 0.000042037 * T - 0.0000001267 * T * T));

  //   return SunData(
  //       longitude: trueLong,
  //       distance: distance,
  //       rightAscension: calculateSunRightAscension(trueLong));
  // }

  // Eclipse Calculations
  EclipseData calculateEclipse(DateTime date) {
    double jd = dateToJulianDate(date);
    double T = (jd - 2451545.0) / 36525.0;

    // Node calculation
    double omega = normalizeAngle(125.04452 - 1934.136261 * T);

    MoonData moonPos = calculateMoonPosition(date);
    SunData sunPos = calculateSunPosition(date);

    double separation = calculateAngularSeparation(
        moonPos.longitude, moonPos.latitude, sunPos.longitude, 0);

    bool isEclipsePossible = (omega.abs() < 18.5);
    bool isSolarEclipse = isEclipsePossible && separation < 1.5;
    bool isLunarEclipse = isEclipsePossible && separation > 178.5;

    return EclipseData(
        isSolarEclipse: isSolarEclipse,
        isLunarEclipse: isLunarEclipse,
        magnitude: calculateEclipseMagnitude(separation),
        duration: calculateEclipseDuration(separation));
  }

  // // Rise/Set Calculations
  // RiseSetData calculateRiseSet(
  //     DateTime date, double latitude, double longitude) {
  //   double jd = dateToJulianDate(date);
  //   double T = (jd - 2451545.0) / 36525.0;

  //   // Local sidereal time
  //   double theta0 = 280.46061837 +
  //       360.98564736629 * (jd - 2451545.0) +
  //       0.000387933 * T * T -
  //       T * T * T / 38710000.0;
  //   theta0 = normalizeAngle(theta0);

  //   MoonData moonPos = calculateMoonPosition(date);
  //   SunData sunPos = calculateSunPosition(date);

  //   return RiseSetData(
  //       moonRise: calculateRiseTime(jd, latitude, longitude, moonPos, theta0),
  //       moonSet: calculateSetTime(jd, latitude, longitude, moonPos, theta0),
  //       sunRise: calculateRiseTime(jd, latitude, longitude, sunPos, theta0),
  //       sunSet: calculateSetTime(jd, latitude, longitude, sunPos, theta0));
  // }

  // RiseSetData calculateRiseSet(
  //     DateTime date, double latitude, double longitude) {
  //   double jd = dateToJulianDate(date);

  //   // Menghitung Local Sidereal Time
  //   double T = (jd - 2451545.0) / 36525.0;
  //   double theta0 = 280.46061837 +
  //       360.98564736629 * (jd - 2451545.0) +
  //       0.000387933 * T * T -
  //       T * T * T / 38710000.0;
  //   theta0 = normalizeAngle(theta0);

  //   MoonData moonPos = calculateMoonPosition(date);
  //   SunData sunPos = calculateSunPosition(date);

  //   // Menghitung rise/set untuk Matahari
  //   var sunRiseSet = calculateCelestialRiseSet(
  //       jd,
  //       latitude,
  //       longitude,
  //       sunPos.rightAscension,
  //       0, // deklinasi matahari (simplified)
  //       -0.833, // koreksi untuk matahari
  //       theta0);

  //   // Menghitung rise/set untuk Bulan
  //   var moonRiseSet = calculateCelestialRiseSet(
  //       jd,
  //       latitude,
  //       longitude,
  //       moonPos.longitude,
  //       moonPos.latitude,
  //       0.125, // koreksi untuk bulan
  //       theta0);

  //   return RiseSetData(
  //       sunRise: sunRiseSet['rise']!,
  //       sunSet: sunRiseSet['set']!,
  //       moonRise: moonRiseSet['rise']!,
  //       moonSet: moonRiseSet['set']!);
  // }

  RiseSetData calculateRiseSet(
      DateTime date, double latitude, double longitude) {
    double jd = dateToJulianDate(date);

    // Menghitung Local Sidereal Time dengan akurasi lebih tinggi
    double T = (jd - 2451545.0) / 36525.0;
    double theta0 = calculateSiderealTime(jd, longitude);

    // Menghitung posisi dengan koreksi yang lebih detail
    MoonData moonPos = calculateMoonPosition(date);
    SunData sunPos = calculateSunPosition(date);

    // Menghitung deklinasi matahari dengan lebih akurat
    double sunDeclination = calculateSunDeclination(jd);

    // Menghitung rise/set untuk Matahari dengan koreksi atmosfer
    var sunRiseSet = calculateCelestialRiseSet(
        jd,
        latitude,
        longitude,
        sunPos.rightAscension,
        sunDeclination,
        -0.833, // Standard atmospheric refraction
        theta0,
        true // isSun
        );

    // Menghitung deklinasi bulan
    double moonDeclination = calculateMoonDeclination(jd);

    // Menghitung rise/set untuk Bulan dengan parallax
    var moonRiseSet = calculateCelestialRiseSet(
        jd,
        latitude,
        longitude,
        moonPos.rightAscension,
        moonDeclination,
        0.125, // Moon's apparent radius
        theta0,
        false // isSun
        );

    return RiseSetData(
      sunRise: sunRiseSet['rise']!,
      sunSet: sunRiseSet['set']!,
      moonRise: moonRiseSet['rise']!,
      moonSet: moonRiseSet['set']!,
    );
  }

  double calculateSiderealTime(double jd, double longitude) {
    double T = (jd - 2451545.0) / 36525.0;
    double theta0 = 280.46061837 +
        360.98564736629 * (jd - 2451545.0) +
        0.000387933 * T * T -
        T * T * T / 38710000.0;

    // Menambahkan nutasi
    double omega = 125.04452 - 1934.136261 * T;
    double L = 280.4665 + 36000.7698 * T;
    double dPsi = -17.20 * sin(degreesToRadians(omega)) / 3600.0;

    theta0 += dPsi * cos(degreesToRadians(23.44));
    theta0 = normalizeAngle(theta0 + longitude);

    return theta0;
  }

  Map<String, DateTime> calculateCelestialRiseSet(
      double jd,
      double latitude,
      double longitude,
      double ra,
      double dec,
      double h0,
      double theta0,
      bool isSun) {
    double phi = degreesToRadians(latitude);
    double delta = degreesToRadians(dec);

    // Menambahkan koreksi paralaks untuk bulan
    if (!isSun) {
      h0 = h0 - 0.7275 * sin(degreesToRadians(latitude));
    }

    // Menghitung hour angle dengan koreksi refraksi
    double cosH = (sin(degreesToRadians(h0)) - sin(phi) * sin(delta)) /
        (cos(phi) * cos(delta));

    if (cosH.abs() > 1) {
      return {
        'rise': DateTime.fromMillisecondsSinceEpoch(0),
        'set': DateTime.fromMillisecondsSinceEpoch(0)
      };
    }

    double H = radiansToDegrees(acos(cosH));

    // Menghitung transit time
    double transitTime = calculateTransitTime(ra, longitude, theta0);

    // Menghitung rise dan set time dengan koreksi
    double riseUT = normalizeHours(transitTime - H / 15.0);
    double setUT = normalizeHours(transitTime + H / 15.0);

    // Menerapkan equation of time untuk matahari
    if (isSun) {
      double eot = calculateEquationOfTime(jd);
      riseUT += eot / 60.0;
      setUT += eot / 60.0;
    }

    // Konversi ke DateTime dengan time zone correction
    DateTime baseDate = julianDateToDate(jd);
    double timeZoneOffset = longitude / 15.0;

    DateTime riseTime = _convertToDateTime(baseDate, riseUT, timeZoneOffset);
    DateTime setTime = _convertToDateTime(baseDate, setUT, timeZoneOffset);

    return {'rise': riseTime, 'set': setTime};
  }

  double calculateTransitTime(double ra, double longitude, double theta0) {
    double transit = ra - theta0;
    transit = normalizeHours(transit / 15.0 + 12.0);
    return transit;
  }

  double calculateSunDeclination(double jd) {
    double T = (jd - 2451545.0) / 36525.0;
    double epsilon = 23.43929111 -
        0.013004167 * T -
        0.000000164 * T * T +
        0.000000503 * T * T * T;
    double L = 280.46646 + 36000.76983 * T + 0.0003032 * T * T;
    double M = 357.52911 + 35999.05029 * T - 0.0001537 * T * T;

    double C = (1.914602 - 0.004817 * T - 0.000014 * T * T) *
            sin(degreesToRadians(M)) +
        (0.019993 - 0.000101 * T) * sin(degreesToRadians(2 * M)) +
        0.000289 * sin(degreesToRadians(3 * M));

    double lambda = L + C;

    return radiansToDegrees(
        asin(sin(degreesToRadians(epsilon)) * sin(degreesToRadians(lambda))));
  }

  double calculateMoonDeclination(double jd) {
    double T = (jd - 2451545.0) / 36525.0;

    // Lunar elements
    double L = 218.316 + 481267.881 * T;
    double M = 134.963 + 477198.867 * T;
    double F = 93.272 + 483202.017 * T;
    double D = 297.850 + 445267.111 * T;

    L = normalizeAngle(L);
    M = normalizeAngle(M);
    F = normalizeAngle(F);
    D = normalizeAngle(D);

    double epsilon = 23.43929111 - 0.013004167 * T;

    // Simplified perturbations
    double lambda = L + 6.289 * sin(degreesToRadians(M));
    double beta = 5.128 * sin(degreesToRadians(F));

    double declination = radiansToDegrees(asin(
        sin(degreesToRadians(beta)) * cos(degreesToRadians(epsilon)) +
            cos(degreesToRadians(beta)) *
                sin(degreesToRadians(epsilon)) *
                sin(degreesToRadians(lambda))));

    return declination;
  }

  DateTime _convertToDateTime(
      DateTime baseDate, double hours, double timeZoneOffset) {
    hours = normalizeHours(hours + timeZoneOffset);

    int hour = hours.floor();
    int minute = ((hours - hour) * 60).round();

    DateTime result =
        DateTime(baseDate.year, baseDate.month, baseDate.day, hour, minute);

    // Adjust for day wraparound
    if (hours < 0) {
      result = result.subtract(const Duration(days: 1));
    } else if (hours >= 24) {
      result = result.add(const Duration(days: 1));
    }

    return result;
  }

  double normalizeHours(double hours) {
    while (hours < 0) hours += 24;
    while (hours >= 24) hours -= 24;
    return hours;
  }

  double calculateEquationOfTime(double jd) {
    double T = (jd - 2451545.0) / 36525.0;
    double L0 = 280.46646 + 36000.76983 * T + 0.0003032 * T * T;
    double M = 357.52911 + 35999.05029 * T - 0.0001537 * T * T;
    double e = 0.016708634 - 0.000042037 * T - 0.0000001267 * T * T;
    double C = (1.914602 - 0.004817 * T - 0.000014 * T * T) *
            sin(degreesToRadians(M)) +
        (0.019993 - 0.000101 * T) * sin(degreesToRadians(2 * M)) +
        0.000289 * sin(degreesToRadians(3 * M));

    double L = L0 + C;
    double v = M + C;
    double E = L0 -
        0.0057183 -
        radiansToDegrees(e * sin(degreesToRadians(M))) +
        C -
        radiansToDegrees(2 * e * sin(degreesToRadians(v)));

    return 4 * (L - 0.0057183 - E);
  }

  // Map<String, DateTime> calculateCelestialRiseSet(double jd, double latitude,
  //     double longitude, double ra, double dec, double h0, double theta0) {
  //   double phi = degreesToRadians(latitude);
  //   double delta = degreesToRadians(dec);

  //   // Menghitung hour angle
  //   double cosH = (sin(degreesToRadians(h0)) - sin(phi) * sin(delta)) /
  //       (cos(phi) * cos(delta));

  //   // Cek apakah objek terbit/terbenam
  //   if (cosH.abs() > 1) {
  //     // Objek selalu di atas atau di bawah horizon
  //     return {
  //       'rise': DateTime.fromMillisecondsSinceEpoch(0),
  //       'set': DateTime.fromMillisecondsSinceEpoch(0)
  //     };
  //   }

  //   double H = radiansToDegrees(acos(cosH));

  //   // Menghitung waktu terbit dan terbenam dalam jam
  //   double riseUT = 24 * ((ra - H - longitude - theta0) / 360.0);
  //   double setUT = 24 * ((ra + H - longitude - theta0) / 360.0);

  //   // Normalisasi ke interval [0,24]
  //   while (riseUT < 0) riseUT += 24;
  //   while (riseUT >= 24) riseUT -= 24;
  //   while (setUT < 0) setUT += 24;
  //   while (setUT >= 24) setUT -= 24;

  //   // Konversi ke DateTime
  //   DateTime baseDate = julianDateToDate(jd);
  //   DateTime riseTime = DateTime(baseDate.year, baseDate.month, baseDate.day,
  //       riseUT.floor(), ((riseUT % 1) * 60).round());

  //   DateTime setTime = DateTime(baseDate.year, baseDate.month, baseDate.day,
  //       setUT.floor(), ((setUT % 1) * 60).round());

  //   // Menerapkan zona waktu lokal
  //   double timeZoneOffset = longitude / 15.0;
  //   riseTime = riseTime.add(Duration(hours: timeZoneOffset.round()));
  //   setTime = setTime.add(Duration(hours: timeZoneOffset.round()));

  //   return {'rise': riseTime, 'set': setTime};
  // }

  // // Helper method untuk menghitung equation of time
  // double calculateEquationOfTime(double jd) {
  //   double T = (jd - 2451545.0) / 36525.0;
  //   double L0 = 280.46646 + 36000.76983 * T + 0.0003032 * T * T;
  //   double M = 357.52911 + 35999.05029 * T - 0.0001537 * T * T;
  //   double e = 0.016708634 - 0.000042037 * T - 0.0000001267 * T * T;

  //   double E =
  //       M + e * sin(degreesToRadians(M)) * (1.0 + e * cos(degreesToRadians(M)));
  //   double diff = L0 - radiansToDegrees(E);

  //   return diff * 4; // Konversi ke menit
  // }

  // Detailed Moon Phase Calculations
  DetailedPhaseData calculateDetailedPhase(DateTime date) {
    double jd = dateToJulianDate(date);
    double T = (jd - 2451545.0) / 36525.0;

    // Menghitung k, dimana k=0 adalah new moon pertama tahun 2000
    double k = ((date.year - 2000) * 12.3685).floor().toDouble();

    // Waktu rata-rata new moon
    double jdeBase = 2451550.09766 + 29.530588861 * k;

    // Koreksi untuk mendapatkan waktu yang lebih akurat
    double M = 2.5534 + 29.10535670 * k; // Sun's mean anomaly
    double Mp = 201.5643 + 385.81693528 * k; // Moon's mean anomaly
    double F = 160.7108 + 390.67050284 * k; // Moon's argument of latitude

    // Menerapkan koreksi periodik
    double correction = -0.40720 * sin(degreesToRadians(Mp)) +
        0.17241 * sin(degreesToRadians(M)) +
        0.01608 * sin(degreesToRadians(2 * Mp)) +
        0.01039 * sin(degreesToRadians(2 * F)) +
        0.00739 * sin(degreesToRadians(2 * Mp - M));

    double jdeNewMoon = jdeBase + correction;

    // Menghitung waktu full moon (tambah setengah periode sinodik)
    double jdeFullMoon = jdeNewMoon + LUNAR_SYNODIC_MONTH / 2;

    // Menghitung fase sekarang
    double phase = (jd - jdeNewMoon) / LUNAR_SYNODIC_MONTH;
    phase = phase - phase.floor(); // Normalisasi ke [0,1]

    // Menghitung illuminasi
    double illumination = (1 - cos(2 * pi * phase)) / 2;

    // Menentukan nama fase yang lebih detail
    String phaseName = _getDetailedPhaseName(phase);

    // Konversi JDE ke DateTime dengan mempertahankan waktu
    DateTime nextNewMoon = julianDateToDate(jdeNewMoon + LUNAR_SYNODIC_MONTH);
    DateTime nextFullMoon = julianDateToDate(jdeFullMoon);

    return DetailedPhaseData(
        phase: phase * 100,
        illumination: illumination * 100,
        phaseName: phaseName,
        ageInDays: phase * LUNAR_SYNODIC_MONTH,
        nextNewMoon: nextNewMoon,
        nextFullMoon: nextFullMoon);
  }

  String _getDetailedPhaseName(double phase) {
    double angle = phase * 360;
    if (angle < 22.5) return 'New Moon';
    if (angle < 67.5) return 'Waxing Crescent';
    if (angle < 112.5) return 'First Quarter';
    if (angle < 157.5) return 'Waxing Gibbous';
    if (angle < 202.5) return 'Full Moon';
    if (angle < 247.5) return 'Waning Gibbous';
    if (angle < 292.5) return 'Last Quarter';
    if (angle < 337.5) return 'Waning Crescent';
    return 'New Moon';
  }

  // DetailedPhaseData calculateDetailedPhase(DateTime date) {
  //   double jd = dateToJulianDate(date);
  //   double T = (jd - 2451545.0) / 36525.0;

  //   // Synodic month calculation
  //   double k = ((date.year - 2000) * 12.3685).floor().toDouble();

  //   // Mean phase
  //   double jde = 2451550.09766 +
  //       29.530588861 * k +
  //       0.00015437 * T * T -
  //       0.000000150 * T * T * T +
  //       0.00000000073 * T * T * T * T;

  //   double phase = (jd - jde) / LUNAR_SYNODIC_MONTH;
  //   phase = phase - phase.floor();

  //   double illumination = (1 - cos(2 * pi * phase)) / 2;
  //   int phaseIndex = (phase * 8).floor() % 8;

  //   return DetailedPhaseData(
  //       phase: phase * 100,
  //       illumination: illumination * 100,
  //       phaseName: MOON_PHASE_NAMES[phaseIndex],
  //       ageInDays: phase * LUNAR_SYNODIC_MONTH,
  //       nextNewMoon: julianDateToDate(jde + LUNAR_SYNODIC_MONTH),
  //       nextFullMoon: julianDateToDate(jde + LUNAR_SYNODIC_MONTH / 2));
  // }

  // Helper Methods
  double calculateMoonLatitude(double F, double Mp) {
    // Implementasi perhitungan latitude bulan
    return 5.13 * sin(degreesToRadians(F));
  }

  double calculateMoonDistance(double D, double M, double Mp) {
    // Implementasi perhitungan jarak bulan
    return 385000.56 * (1 - 0.055 * cos(degreesToRadians(Mp)));
  }

  double calculateMoonPhase(double D, double M, double Mp) {
    return ((1 - cos(degreesToRadians(D))) / 2) * 100;
  }

  double calculateSunRightAscension(double trueLong) {
    return radiansToDegrees(atan2(
        sin(degreesToRadians(trueLong)) *
            cos(degreesToRadians(OBLIQUITY_OF_ECLIPTIC)),
        cos(degreesToRadians(trueLong))));
  }

  double calculateAngularSeparation(
      double long1, double lat1, double long2, double lat2) {
    double phi1 = degreesToRadians(lat1);
    double phi2 = degreesToRadians(lat2);
    double deltaLambda = degreesToRadians(long2 - long1);

    return radiansToDegrees(
        acos(sin(phi1) * sin(phi2) + cos(phi1) * cos(phi2) * cos(deltaLambda)));
  }

  double calculateEclipseMagnitude(double separation) {
    // Simplified magnitude calculation
    return 1.0 - separation / 1.5;
  }

  Duration calculateEclipseDuration(double separation) {
    // Simplified duration calculation
    int minutes = ((1.5 - separation) * 120).round();
    return Duration(minutes: minutes > 0 ? minutes : 0);
  }

  DateTime calculateRiseTime(double jd, double lat, double long,
      dynamic celestialObject, double theta0) {
    // Simplified rise time calculation
    return julianDateToDate(jd + 6 / 24.0); // Example: sunrise at 6 AM
  }

  DateTime calculateSetTime(double jd, double lat, double long,
      dynamic celestialObject, double theta0) {
    // Simplified set time calculation
    return julianDateToDate(jd + 18 / 24.0); // Example: sunset at 6 PM
  }

  double calculateParallax(double distance, double altitude) {
    return radiansToDegrees(
        asin(EARTH_RADIUS / distance * cos(degreesToRadians(altitude))));
  }

  // Menambahkan perhitungan refraksi atmosfer
  double calculateAtmosphericRefraction(double apparentAltitude) {
    double h = apparentAltitude; // dalam derajat
    if (h < -2) return 0;

    // Formula Bennet untuk refraksi atmosfer
    return 1.02 / tan(degreesToRadians(h + 10.3 / (h + 5.11)));
  }

  // Menambahkan perhitungan waktu terbit/terbenam yang lebih akurat
  DateTime calculateAccurateRiseTime(double jd, double lat, double long,
      dynamic celestialObject, double theta0) {
    double h0 = -0.833; // Koreksi refraksi standar untuk matahari
    if (celestialObject is MoonData) {
      h0 = 0.125; // Koreksi untuk bulan
    }

    double phi = degreesToRadians(lat);
    double delta = degreesToRadians(celestialObject.latitude);
    double cosH = (sin(degreesToRadians(h0)) - sin(phi) * sin(delta)) /
        (cos(phi) * cos(delta));

    if (cosH.abs() > 1) {
      // Objek selalu di atas atau di bawah horizon
      return DateTime.fromMillisecondsSinceEpoch(0);
    }

    double H = radiansToDegrees(acos(cosH));
    double T = (H - long - theta0) / 360.0;

    // Normalisasi T ke interval [0,1]
    while (T < 0) T += 1;
    while (T > 1) T -= 1;

    return julianDateToDate(jd + T);
  }

  // Menambahkan perhitungan fase bulan yang lebih detail
  Map<String, dynamic> calculateDetailedLunarPhase(DateTime date) {
    DetailedPhaseData basicPhase = calculateDetailedPhase(date);
    double age = basicPhase.ageInDays;

    // Menghitung karakteristik tambahan
    double synodicMonth = LUNAR_SYNODIC_MONTH;
    double percentageComplete = (age / synodicMonth) * 100;

    // Menentukan karakteristik fase yang lebih spesifik
    String detailedDescription = '';
    if (percentageComplete < 1.84) {
      detailedDescription = 'New Moon';
    } else if (percentageComplete < 23.14) {
      detailedDescription = 'Waxing Crescent';
    } else if (percentageComplete < 26.84) {
      detailedDescription = 'First Quarter';
    } else if (percentageComplete < 48.14) {
      detailedDescription = 'Waxing Gibbous';
    } else if (percentageComplete < 51.84) {
      detailedDescription = 'Full Moon';
    } else if (percentageComplete < 73.14) {
      detailedDescription = 'Waning Gibbous';
    } else if (percentageComplete < 76.84) {
      detailedDescription = 'Last Quarter';
    } else if (percentageComplete < 98.14) {
      detailedDescription = 'Waning Crescent';
    } else {
      detailedDescription = 'New Moon';
    }

    // Menghitung visibilitas
    double visibility = calculateMoonVisibility(date);

    return {
      'basicPhase': basicPhase,
      'percentageComplete': percentageComplete,
      'detailedDescription': detailedDescription,
      'visibility': visibility,
      'isVisible': visibility > 0,
      'bestViewingTime': calculateBestViewingTime(date, visibility)
    };
  }

  // Menghitung visibilitas bulan
  double calculateMoonVisibility(DateTime date) {
    MoonData moonPos = calculateMoonPosition(date);
    SunData sunPos = calculateSunPosition(date);

    double elongation = calculateAngularSeparation(
        moonPos.longitude, moonPos.latitude, sunPos.longitude, 0);

    // Formula sederhana untuk visibilitas
    return (1 - cos(degreesToRadians(elongation))) / 2 * 100;
  }

  // Menghitung waktu terbaik untuk mengamati bulan
  DateTime calculateBestViewingTime(DateTime date, double visibility) {
    RiseSetData riseSet =
        calculateRiseSet(date, 0, 0); // menggunakan koordinat default

    if (visibility < 30) {
      // Bulan terbaik diamati saat matahari terbenam
      return riseSet.sunSet;
    } else if (visibility > 70) {
      // Bulan terbaik diamati tengah malam
      return DateTime(date.year, date.month, date.day, 0, 0)
          .add(const Duration(hours: 24));
    } else {
      // Waktu optimal antara terbenam matahari dan tengah malam
      return riseSet.sunSet.add(const Duration(hours: 2));
    }
  }

  // Menambahkan perhitungan libration bulan
  Map<String, double> calculateLunarLibration(DateTime date) {
    double jd = dateToJulianDate(date);
    double T = (jd - 2451545.0) / 36525.0;

    // Mean elements
    double F = normalizeAngle(93.2720950 + 483202.0175233 * T);
    double omega = normalizeAngle(125.04452 - 1934.136261 * T);

    // Libration in longitude
    double l = 0.024381 * sin(degreesToRadians(F));

    // Libration in latitude
    double b = 0.024381 * sin(degreesToRadians(omega));

    return {
      'longitudeLibration': l,
      'latitudeLibration': b,
      'totalLibration': sqrt(l * l + b * b)
    };
  }
}

void printDetailedMoonInfo() {
  var calculator = AstronomicalCalculator();
  DateTime now = DateTime.now();
  var phaseInfo = calculator.calculateDetailedLunarPhase(now);
  DetailedPhaseData basicPhase = phaseInfo['basicPhase'] as DetailedPhaseData;

  print('\nDetailed Moon Information:');
  print('Current Phase: ${basicPhase.phaseName}');
  print('Moon Age: ${basicPhase.ageInDays.toStringAsFixed(1)} days');
  print('Illumination: ${basicPhase.illumination.toStringAsFixed(1)}%');
  print(
      'Next New Moon: ${formatDateTime(basicPhase.nextNewMoon)} ${formatDate(basicPhase.nextNewMoon)}');
  print(
      'Next Full Moon: ${formatDateTime(basicPhase.nextFullMoon)} ${formatDate(basicPhase.nextFullMoon)}');
  print('Visibility: ${phaseInfo['visibility'].toStringAsFixed(1)}%');
  print('Best Viewing Time: ${formatDateTime(phaseInfo['bestViewingTime'])}');
}

void additionalExamples() {
  var calculator = AstronomicalCalculator();
  DateTime now = DateTime.now();

  // Menghitung fase bulan detail
  Map<String, dynamic> detailedPhase =
      calculator.calculateDetailedLunarPhase(now);
  print('\nDetailed Moon Phase Analysis:');
  print('Phase: ${detailedPhase['detailedDescription']}');
  print(
      'Completion: ${detailedPhase['percentageComplete'].toStringAsFixed(1)}%');
  print('Visibility: ${detailedPhase['visibility'].toStringAsFixed(1)}%');
  print('Best Viewing Time: ${detailedPhase['bestViewingTime'].toString()}');

  // Menghitung librasi bulan
  Map<String, double> libration = calculator.calculateLunarLibration(now);
  print('\nLunar Libration:');
  print('Longitude: ${libration['longitudeLibration']!.toStringAsFixed(4)}°');
  print('Latitude: ${libration['latitudeLibration']!.toStringAsFixed(4)}°');
  print('Total: ${libration['totalLibration']!.toStringAsFixed(4)}°');
}

// Example Usage
void main() {
  var calculator = AstronomicalCalculator();
  DateTime now = DateTime.now();
  double latitude = -7.823704; // Jakarta
  double longitude = 110.4028529;

  // Calculate Moon Position
  MoonData moonData = calculator.calculateMoonPosition(now);
  print('Moon Position:');
  print('Longitude: ${moonData.longitude}°');
  print('Latitude: ${moonData.latitude}°');
  print('Distance: ${moonData.distance} km');
  print('Phase: ${moonData.phase}%\n');

  // Calculate Sun Position
  SunData sunData = calculator.calculateSunPosition(now);
  print('Sun Position:');
  print('Longitude: ${sunData.longitude}°');
  print('Distance: ${sunData.distance} AU');
  print('Right Ascension: ${sunData.rightAscension}°\n');

  // Calculate Eclipse
  EclipseData eclipseData = calculator.calculateEclipse(now);
  print('Eclipse Information:');
  print('Solar Eclipse: ${eclipseData.isSolarEclipse}');
  print('Lunar Eclipse: ${eclipseData.isLunarEclipse}');
  if (eclipseData.isSolarEclipse || eclipseData.isLunarEclipse) {
    print('Magnitude: ${eclipseData.magnitude}');
    print('Duration: ${eclipseData.duration.inMinutes} minutes\n');
  }

  // Calculate Rise/Set Times
  RiseSetData riseSetData =
      calculator.calculateRiseSet(now, latitude, longitude);
  print('Rise/Set Times:');
  print('Sunrise: ${riseSetData.sunRise}');
  print('Sunset: ${riseSetData.sunSet}');
  print('Moonrise: ${riseSetData.moonRise}');
  print('Moonset: ${riseSetData.moonSet}\n');

  // Calculate Detailed Moon Phase
  DetailedPhaseData phaseData = calculator.calculateDetailedPhase(now);
  print('Detailed Moon Phase:');
  print('Phase Name: ${phaseData.phaseName}');
  print('Illumination: ${phaseData.illumination}%');
  print('Age: ${phaseData.ageInDays.toStringAsFixed(1)} days');
  print('Next New Moon: ${phaseData.nextNewMoon}');
  print('Next Full Moon: ${phaseData.nextFullMoon}');

  additionalExamples();
  printDetailedMoonInfo();
}
